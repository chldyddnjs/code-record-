//문자열 자료구조 TRIE
/

#include<string>
#inlcude<vector>
#include<map>

using namespace std;

struct TRIE{
  TRIE *Node[26]; //26개의 노드를 가지고 있다.
  int Child_Cnt; //자식의 개수
  bool Finish; //문자열 삽입이 끝난 것을 표시
  
  void Insert(const char *Str); //삽입 메소드
  int Find(const char *Str); //찾기 메소드
};

int Idx = 0;
TRIE *Trie[10010], *R_Trie[10010]; //원본 문자열 뒤집은 문자열
TRIE Nodepool[1000010 * 2]; //

TREIE *Nodeset(){
  TRIE *NewNode = &Nodepool[Idx++];
  NewNode -> Child_Cnt = 0;
  NewNode -> Finish = false;
  for(int i=0;< 26;i++) NewNode->Node[i] = NULL;
  
  return NewNode;
}

void TRIE::Insert(const char *Str){
  Child_Cnt++;
  if(*Str == NULL){
    Finsh = true;
    return;
  }
  
  int Cur = *Str - 'a';
  if(Node[Cur] == NULL) Node[Cur] = Nodeset();
  Node[Cur] ->Insert(Str + 1);
}

int TRIE::Find(const char *Str){
  if(*Str == '?') return Child_cnt;
  int Cur = *Str - 'a';
  if(Node[Cur] == NULL) return 0;
  return Node[Cur] -> Find(Str + 1);
}

int Check_State(string S){
  if(S[0] == '?') return 0;
  if(S[S.length() -1] == '?') return 1;
}

string Reverse(string S){
  string Temp = "";
  for(int i=S.length()-1;i>=0;i--){
    Temo = Temp + S[i];
  }
  return Temp;
}

vector<int>solution(vector<string>words,vector<string> queries){
  vector<int> answer;
  for(int i=0;i<words.size();i++){
    string S = words[i];
    int Len = S.length();
    if(Trie[Len] == NULL) Trie[Len] = Nodeset();
    
    
    Trie[Len] -> Insert(S.c_str());
    
    string Reverse_S = Reverse(S);
    if(R_Trie[Len] == NULL) R_Trie[Len] = Nodeset();
    R_Trie[Len] -> Insert(Reverse_S.c_str());
    
  }

}
