
/*
그리디를 이용한 간단한 다익스트라 알고리즘
*/
import sys

input = sys.stdin.readline
INF = int(1e9)

n,m = map(int,input().split())

start = int(input())

graph = [[] for i in range(n+1)]

visited = [False] * (n+1)

distance = [INF] * (n+1)

for i in range(m):
  a,b,c = map(int,input().split())
  graph[a].append((b,c))

def smallest_node():
  min_value = INF
  index = 0
  for i in range(1,n+1):
    if distance[i] < min_value and not visited[i]:
      min_value = distance[i]
      index = i
  return index

def dijkstra(start):
  #시작노드에대해서 초기화
  distance[start] = 0
  visited[start] = true
  for j in graph[start]:
    distance[j[0]] = j[1]
  #시작노드를 제외한 전체 n-1개의 노드에 대해 반복
  for i in range(n-1):
    #현재 최단 거리가 가장 짧은 노드를 꺼내서 방문처리
    now = get_smallest_node()
    visited[now] = true
    #현재 노드와 연결된 다른 노드를 확인
    for j in graph[now]:
      cost = distance[now] + j[i]
      #현재 노드를 거쳐서 다른 노드로 이동하는  거리가 더 짧은 경우
      if cost > distance[j[0]]:
        distance[j[0]] = cost
        
 dijkstra(start)
  
for i in range(1,n+1):
  #도달할 수 없는 경우, 무한이라고 출력
  if distance[i] == INF:
    print("INFINITY")
  else:
    print(distance[i])


